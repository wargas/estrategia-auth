{"ast":null,"code":"import chromium from 'chrome-aws-lambda';\nimport puppeteer from 'puppeteer-core';\nexport default async function handler(req, res) {\n  const {\n    email,\n    password\n  } = req.body;\n\n  if (!email || !password) {\n    res.send({\n      message: 'email ou senha invalidos'\n    });\n  }\n\n  try {\n    const isDev = !process.env.AWS_REGION;\n    let options;\n\n    if (isDev) {\n      options = {\n        args: [],\n        executablePath: \"C:\\\\Program Files (x86)\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe\",\n        headless: true,\n        ignoreHTTPSErrors: true\n      };\n    } else {\n      options = {\n        args: chromium.args,\n        executablePath: await chromium.executablePath,\n        headless: true,\n        ignoreHTTPSErrors: true\n      };\n    }\n\n    const browser = await puppeteer.launch(options);\n    let page = await browser.newPage(); // page.on('request', request => {\n    //     const url = request.url();\n    //     if(request.method() === 'GET' && url.match('api/aluno/curso')) {\n    //         const {authorization: token = ''} = request.headers()\n    //         res.send({token})\n    //     }\n    //     if(url.match('loja/entrar')) {\n    //         res.send({message: 'email ou senha invalidos'})\n    //     }\n    // })\n\n    await page.goto('https://www.estrategiaconcursos.com.br/');\n    await page.click('.button-header');\n    await page.type('[name=email]', email);\n    await page.type('[name=senha]', password);\n    await page.click('.ui-control [type=submit]');\n    await page.waitForNavigation();\n    await page.goto('https://www.estrategiaconcursos.com.br/oauth/token/');\n    await page.screenshot({\n      path: 'screenshot.png',\n      type: 'png'\n    });\n    const body = await page.evaluate(() => {\n      return {\n        body: document.body.textContent\n      };\n    });\n    res.send(body.body);\n  } catch (error) {\n    console.log(error);\n    res.send(JSON.stringify(error));\n  }\n}","map":{"version":3,"sources":["C:/projetos/estrategia-auth/pages/api/auth.js"],"names":["chromium","puppeteer","handler","req","res","email","password","body","send","message","isDev","process","env","AWS_REGION","options","args","executablePath","headless","ignoreHTTPSErrors","browser","launch","page","newPage","goto","click","type","waitForNavigation","screenshot","path","evaluate","document","textContent","error","console","log","JSON","stringify"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,mBAArB;AACA,OAAOC,SAAP,MAAsB,gBAAtB;AAEA,eAAe,eAAeC,OAAf,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAiC;AAE5C,QAAM;AAACC,IAAAA,KAAD;AAAQC,IAAAA;AAAR,MAAoBH,GAAG,CAACI,IAA9B;;AAEA,MAAG,CAACF,KAAD,IAAU,CAACC,QAAd,EAAwB;AACpBF,IAAAA,GAAG,CAACI,IAAJ,CAAS;AAACC,MAAAA,OAAO,EAAE;AAAV,KAAT;AACH;;AAED,MAAI;AACA,UAAMC,KAAK,GAAG,CAACC,OAAO,CAACC,GAAR,CAAYC,UAA3B;AACA,QAAIC,OAAJ;;AAEA,QAAIJ,KAAJ,EAAW;AACPI,MAAAA,OAAO,GAAG;AACNC,QAAAA,IAAI,EAAE,EADA;AAENC,QAAAA,cAAc,EAAE,kEAFV;AAGNC,QAAAA,QAAQ,EAAE,IAHJ;AAINC,QAAAA,iBAAiB,EAAE;AAJb,OAAV;AAMH,KAPD,MAOO;AACHJ,MAAAA,OAAO,GAAG;AACNC,QAAAA,IAAI,EAAEf,QAAQ,CAACe,IADT;AAENC,QAAAA,cAAc,EAAE,MAAMhB,QAAQ,CAACgB,cAFzB;AAGNC,QAAAA,QAAQ,EAAE,IAHJ;AAINC,QAAAA,iBAAiB,EAAE;AAJb,OAAV;AAMH;;AAED,UAAMC,OAAO,GAAG,MAAMlB,SAAS,CAACmB,MAAV,CAAiBN,OAAjB,CAAtB;AAEA,QAAIO,IAAI,GAAG,MAAMF,OAAO,CAACG,OAAR,EAAjB,CAtBA,CAwBA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;;AAEA,UAAMD,IAAI,CAACE,IAAL,CAAU,yCAAV,CAAN;AAEA,UAAMF,IAAI,CAACG,KAAL,CAAW,gBAAX,CAAN;AACA,UAAMH,IAAI,CAACI,IAAL,CAAU,cAAV,EAA0BpB,KAA1B,CAAN;AACA,UAAMgB,IAAI,CAACI,IAAL,CAAU,cAAV,EAA0BnB,QAA1B,CAAN;AAEA,UAAMe,IAAI,CAACG,KAAL,CAAW,2BAAX,CAAN;AAEA,UAAMH,IAAI,CAACK,iBAAL,EAAN;AAEA,UAAML,IAAI,CAACE,IAAL,CAAU,qDAAV,CAAN;AAEA,UAAMF,IAAI,CAACM,UAAL,CAAgB;AAACC,MAAAA,IAAI,EAAE,gBAAP;AAAyBH,MAAAA,IAAI,EAAE;AAA/B,KAAhB,CAAN;AAEA,UAAMlB,IAAI,GAAG,MAAMc,IAAI,CAACQ,QAAL,CAAc,MAAM;AACnC,aAAO;AACHtB,QAAAA,IAAI,EAAEuB,QAAQ,CAACvB,IAAT,CAAcwB;AADjB,OAAP;AAGH,KAJkB,CAAnB;AAMA3B,IAAAA,GAAG,CAACI,IAAJ,CAASD,IAAI,CAACA,IAAd;AAEH,GA7DD,CA6DE,OAAOyB,KAAP,EAAc;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA5B,IAAAA,GAAG,CAACI,IAAJ,CAAS2B,IAAI,CAACC,SAAL,CAAeJ,KAAf,CAAT;AACH;AAGJ","sourcesContent":["import chromium from 'chrome-aws-lambda';\r\nimport puppeteer from 'puppeteer-core';\r\n\r\nexport default async function handler(req, res) {\r\n\r\n    const {email, password} = req.body;\r\n\r\n    if(!email || !password) {\r\n        res.send({message: 'email ou senha invalidos'})\r\n    }\r\n\r\n    try {\r\n        const isDev = !process.env.AWS_REGION;\r\n        let options;\r\n\r\n        if (isDev) {\r\n            options = {\r\n                args: [],\r\n                executablePath: \"C:\\\\Program Files (x86)\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe\",\r\n                headless: true,\r\n                ignoreHTTPSErrors: true,\r\n            }\r\n        } else {\r\n            options = {\r\n                args: chromium.args,\r\n                executablePath: await chromium.executablePath,\r\n                headless: true,\r\n                ignoreHTTPSErrors: true,\r\n            }\r\n        }\r\n\r\n        const browser = await puppeteer.launch(options);\r\n        \r\n        let page = await browser.newPage();\r\n\r\n        // page.on('request', request => {\r\n        //     const url = request.url();\r\n\r\n        //     if(request.method() === 'GET' && url.match('api/aluno/curso')) {\r\n\r\n        //         const {authorization: token = ''} = request.headers()\r\n\r\n        //         res.send({token})\r\n        //     }\r\n\r\n        //     if(url.match('loja/entrar')) {\r\n        //         res.send({message: 'email ou senha invalidos'})\r\n        //     }\r\n        // })\r\n\r\n        await page.goto('https://www.estrategiaconcursos.com.br/');\r\n\r\n        await page.click('.button-header');\r\n        await page.type('[name=email]', email)\r\n        await page.type('[name=senha]', password)\r\n\r\n        await page.click('.ui-control [type=submit]')\r\n        \r\n        await page.waitForNavigation();\r\n       \r\n        await page.goto('https://www.estrategiaconcursos.com.br/oauth/token/')\r\n\r\n        await page.screenshot({path: 'screenshot.png', type: 'png'});\r\n\r\n        const body = await page.evaluate(() => {\r\n            return {\r\n                body: document.body.textContent\r\n            }\r\n        })\r\n\r\n        res.send(body.body)\r\n\r\n    } catch (error) {\r\n        console.log(error)\r\n        res.send(JSON.stringify(error))\r\n    }\r\n\r\n\r\n}"]},"metadata":{},"sourceType":"module"}